struct Vector2{
    float x;
    float y;
}

struct Figure{
    Vector2 position;
    float rotation;
    float size;
    string name;
}




Figure getFigure(float x, float y, float rotation, float size, string name)
{
    return { {x,y}, rotation, size, name };
}

Figure test_figure = getFigure(1.0, 2.0, 3.0, 4.0, "Chris");

string test_name=getFigure(1.0, 2.0, 3.0, 4.0, "Chris").name;

int big_math=1+2*3/4-5+6*7/8-9+10*11/12-13+14*15/16-17+18*19/20-21+22*23/24-25+26*27/28-29+30*31/32-33+34*35/36-37+38*39/40-41+42*43/44-45+46*47/48-49+50*51/52-53+54*55/56-57+58*59/60-61+62*63/64-65+66*67/68-69+70*71/72-73+74*75/76-77+78*79/80-81+82*83/84-85+86*87/88-89+90*91/92-93+94*95/96-97+98*99/100-101+102*103/104-105+106*107/108-109+110*111/112-113+114*115/116-117+118*119/120-121+122*123/124-125+126*127/128-129+130*131/132-133+134*135/136-137+138*139/140-141+142*143/144-145+146*147/148-149+150*151/152-153+154*155/156-157+158*159/160-161+162*163/164-165+166*167/168-169+170*171/172-173+174*175/176-177+178*179/180-181+182*183/184-185+186*187/188-189+190*191/192-193+194*195/196-197+198*199/200-201+202*203/204-205+206*207/208-209+210*211/212-213+214*215/216-217+218*219/220-221+222*223/224-225+226*227/228-229+230*231/232-233+234*235/236-237+238*239/240-241+242*243/244-245+246*247/248-249+250;
int big_math_parenthesis=(1+2)*(3/4)-(5+6)*(7/8)-(9+10)*(11/12)-(13+14)*(15/16)-(17+18)*(19/20)-(21+22)*(23/24)-(25+26)*(27/28)-(29+30)*(31/32)-(33+34)*(35/36)-(37+38)*(39/40)-(41+42)*(43/44)-(45+46)*(47/48)-(49+50)*(51/52)-(53+54)*(55/56)-(57+58)*(59/60)-(61+62)*(63/64)-(65+66)*(67/68)-(69+70)*(71/72)-(73+74)*(75/76)-(77+78)*(79/80)-(81+82)*(83/84)-(85+86)*(87/88)-(89+90)*(91/92)-(93+94)*(95/96)-(97+98)*(99/100)-(101+102)*(103/104)-(105+106)*(107/108)-(109+110)*(111/112)-(113+114)*(115/116)-(117+118)*(119/120)-(121+122)*(123/124)-(125+126)*(127/128)-(129+130)*(131/132)-(133+134)*(135/136)-(137+138)*(139/140)-(141+142)*(143/144)-(145+146)*(147/148)-(149+150)*(151/152)-(153+154)*(155/156)-(157+158)*(159/160)-(161+162)*(163/164)-(165+166)*(167/168)-(169+170)*(171/172)-(173+174)*(175/176)-(177+178)*(179/180)-(181+182)*(183/184)-(185+186)*(187/188)-(189+190)*(191/192)-(193+194)*(195/196)-(197+198)*(199/200)-(201+202)*(203/204)-(205+206)*(207/208)-(209+210)*(211/212)-(213+214)*(215/216)-(217+218)*(219/220)-(221+222)*(223/224)-(225+226)*(227/228)-(229+230)*(231/232)-(233+234)*(235/236)-(237+238)*(239/240)-(241+242)*(243/244)-(245+246)*(247/248)-(1*(2/3)-4*(5/6)-7*(8/9)-10*(11/12)-13*(14/15)-16*(17/18)-19*(20/21)-22*(23/24)-25*(26/27)-28*(29/30)-31*(32/33)-34*(35/36)-37*(38/39)-40*(41/42)-43*(44/45)-46*(47/48)-49*(50/51)-52*(53/54)-55*(56/57)-58*(59/60)-61*(62/63)-64*(65/66)-67*(68/69)-70*(71/72)-73*(74/75)-76*(77/78)-79*(80/81)-82*(83/84)-85*(86/87)-88*(89/90)-91*(92/93)-94*(95/96)-97*(98/99)-100*(101/102)-103*(104/105)-106*(107/108)-109*(110/111)-112*(113/114)-115*(116/117)-118*(119/120)-121*(122/123)-124*(125/126)-127*(128/129)-130*(131/132)-133*(134/135)-136*(137/138)-139*(140/141)-142*(143/144)-145*(146/147)-148*(149/150)-151*(152/153)-154*(155/156)-157*(158/159)-160*(161/162)-163*(164/165)-166*(167/168)-169*(170/171)-172*(173/174)-175*(176/177)-178*(179/180)-181*(182/183)-184*(185/186)-187*(188/189)-190*(191/192)-193*(194/195)-196*(197/198)-199*(200/201)-202*(203/204)-205*(206/207)-208*(209/210)-211*(212/213)-214*(215/216)-217*(218/219)-220*(221/222)-223*(224/225)-226*(227/228)-229*(230/231)-232*(233/234)-235*(236/237)-238*(239/240)-241*(242/243)-244*(245/246)-247*(248/249)-250);

int getValue1()
{
    return 1;
}

int getValue2()
{
    return 2;
}

int thisShouldBeOptimizedOut()
{
    return getValue1() + getValue2();
}


int update()
{
    Vector2 position={0.0,0.0};
    Figure figure = {position,0.0,1.0, "Chris"};
    figure={position,0.0,1.0, "Chris"};

    say(figure.name);
    say(figure.position.x);
    say(figure.position.y);
    say(figure.rotation);

    say(true);
    say(1);

    int test=1;
    if(false)
        test=thisShouldBeOptimizedOut();

    if(true)
        return 1;
    else
        return thisShouldBeOptimizedOut();
}


int wonga=0;

update();




int[] array3={1,2,3,4,5,6,7,8,9,10};
int[] array2=int[10]; //this should move the stack pointer but not change the value
int test2=array3[0];



struct test {
    int val;
    int val2;
}

test[] test_array = { {1,2}, {3,4}, {5,6} };
for(int i=0; i<#(test_array); i++)
{
    say(test_array[i].val);
}

int a=1;
int b=2;
int[] array = int[a+b];

int test=1;
if(false) 
    test=thisShouldBeOptimizedOut();

if(true)
    test=1;
else
    test=thisShouldBeOptimizedOut();





struct foo{
    int a;
    int b;
}

struct bar{
    foo c;
    foo d;
}

bar[] e= bar[10];


bar f = { {1,2}, {3,4}};
bar g;



foo[] h = { {1,2}, {3,4}, {5,6}, {7,8}, {9,10}, {11,12}, {13,14}, {15,16}, {17,18}, {19,20} };
h[0]= {1,2};
h[1].a=3;

foo j = {3,4};
h[2]= j;
h[3]=f.c;
h[4]=h[3];




foo[] array_func()
{
    return foo[10];
}


foo[] k=array_func();
int l=array_func()[0].a;